
* Comparing my counts with MPIs:
** Inputs:
   - My counts from the final output of WD set of 8 batches
     - This is filtered to just the first batch, to match Grün's input
   - MPIs counts which emulates Grün's perl matrix generation filtering principles on WD batch 1
     - The reason why the actual perl script was not used is because the cell barcode headers are not preserved making it difficult to compare my matrix with his.
** Script:

#+BEGIN_SRC R :results output graphics :file plot1.png
library(ggplot2)
library(reshape2)

dom_mat <- read.csv('inputs/output.all.matrix_simple.tsv', sep='\t', header=T, row.names=1)
min_mat <- read.csv('inputs/Galaxy7-[Cross-contamination_Filter_on_data_2_and_data_5__Filtered_Table].tabular', sep='\t', header=T, row.names=1)

rbind(dim(min_mat), dim(dom_mat))
cbind(min_mat[1:3,1:3], dom_mat[1:3,1:3])

colnames(dom_mat) <-  sub("(*)", "P1_B1_\\1", colnames(dom_mat))
smin_mat <- min_mat[,grepl("P1_B1_", colnames(min_mat))]
sdom_mat <- dom_mat[,colnames(dom_mat) %in% colnames(smin_mat)]

#common_names <- rownames(smin_mat) %in% rownames(sdom_mat)
#message("Common names: ", length(common_names))

#scmine <- smin_mat[common_names,]
#scgrun <- sdom_mat[common_names,]
#message("Dim mine, gruns:")
#dim(scmine)
#dim(scgrun)

tab_grun <- melt(as.matrix(sdom_mat), varnames= c("Genes", "Cells"), value.name = "Grun")
tab_mine <- melt(as.matrix(smin_mat), varnames= c("Genes", "Cells"), value.name = "Mine")
cbind(tab_grun[1:3,1:3], tab_mine[1:3,1:3])

joined <- merge(tab_mine, tab_grun, by = c("Genes", "Cells"))
head(joined, 3)

#pdf("ggcompareFull.lim50.pdf")
ggplot(joined, aes(x=Mine,y=Grun)) + geom_point(alpha=0.2) + xlim(0,50) + ylim(0,50)
#dev.off()

#+END_SRC

#+RESULTS:
[[file:plot1.png]]

*** Why the high counts for Grün and zero for me?

I need to find the specific readnames of Grün's matrix which means modifying the GeneralUtils.py on the biu cluster.

**** DONE Update GeneralUtils to give a detailed matrix of readnames.
**** Generate scripts to:
***** Generate TSV files:
- [X] Grun

Prepend "P1_B1" to barcodes in this file, and remove all non-numeric values → tsv
#+BEGIN_SRC python :results output :file inputs/grun.tsv
def header2barcode(header):
    return("".join(
        ["".join(y) for y in list(zip(*[list(x) for x in header.splitlines()]))]
    ).split())

prepend = "P1_B1_"

with open('./inputs/output.all.matrix_simple','r') as mat:
    found_geneID = False
    headers = ""
    dlen = 0
    
    for line in mat:
        if not(found_geneID):
            if line.startswith("%30s" % "GENEID"):
                found_geneID = True
                print('\t' + '\t'.join([(prepend + x) for x in header2barcode(headers)]))
            else:
                headers += line
            continue

        tokes = line.split()
        gname = tokes[0]
        cdata = ["0" if x=="-" else ("%d" % int(x)) for x in tokes[1:]]

        if dlen == 0:
            dlen = len(cdata)
        elif dlen != len(cdata):
            print("Dlen mismatch", dlen, len(cdata), gname, file=sys.stderr)
            exit(-1)

        print(gname + '\t' + '\t'.join(cdata))

#+END_SRC

#+RESULTS:
[[file:inputs/grun.tsv]]

- [ ] Mine
#+BEGIN_SRC R :results output :file inputs/mine.tsv
tab <- read.csv('inputs/Galaxy7-[Cross-contamination_Filter_on_data_2_and_data_5__Filtered_Table].tabular', sep='\t', header=T, row.names=1, stringsAsFactors=FALSE)
tsub <- tab[,grepl("P1_B1_", colnames(tab))]

write.table(tsub, file="/dev/stdout", quote=F, sep='\t', col.names=NA)
#+END_SRC

#+RESULTS:
[[file:inputs/mine.tsv]]


***** DONE Compare two TSV matrices and generate a joined table of counts

#+BEGIN_SRC bash
mkdir -p 1_merged
#+END_SRC

#+RESULTS:

#+BEGIN_SRC R :results output table
library(reshape2)

dom_mat <- read.csv('inputs/grun.tsv', sep='\t', header=T, row.names=1)
min_mat <- read.csv('inputs/mine.tsv', sep='\t', header=T, row.names=1)

tab_grun <- melt(as.matrix(dom_mat), varnames= c("Genes", "Cells"), value.name = "Grun")
tab_mine <- melt(as.matrix(min_mat), varnames= c("Genes", "Cells"), value.name = "Mine")

joined <- merge(tab_mine, tab_grun, by = c("Genes", "Cells"))
head(joined)
saveRDS(joined, '1_merged/joined_mine_grun.rds')
#+END_SRC

#+RESULTS:
:                Genes        Cells Mine Grun
: 1 ENSDARG00000000002 P1_B1_AACCTC    0    0
: 2 ENSDARG00000000002 P1_B1_AACGAG    0    0
: 3 ENSDARG00000000002 P1_B1_AAGCCA    0    0
: 4 ENSDARG00000000002 P1_B1_ACAAGC    0    0
: 5 ENSDARG00000000002 P1_B1_ACAGAC    0    0
: 6 ENSDARG00000000002 P1_B1_ACAGGA    0    0

****** Find the most significant Gene/Cell combos where Grün is high and mine are low

#+BEGIN_SRC R :results output
  joined <- readRDS('1_merged/joined_mine_grun.rds')
  better.grun <- joined[order(joined$Mine - joined$Grun),]
  better.mine <- joined[order(joined$Grun - joined$Mine),]
  head(better.grun, 10)
  head(better.mine, 10)
#+END_SRC

#+RESULTS:
#+begin_example
                     Genes        Cells Mine Grun
783541  ENSDARG00000058327 P1_B1_TGAGGA    0  134
783514  ENSDARG00000058327 P1_B1_GACGAA    0  102
83701   ENSDARG00000006786 P1_B1_TGAGGA    2   89
520309  ENSDARG00000038995 P1_B1_TGAGGA    1   87
520282  ENSDARG00000038995 P1_B1_GACGAA    0   76
783461  ENSDARG00000058327 P1_B1_ACAGAC    0   75
783472  ENSDARG00000058327 P1_B1_ACTCTG    2   77
729712  ENSDARG00000055839 P1_B1_ACTCTG    0   68
1267765 ENSDARG00000090943 P1_B1_TGAGGA    0   68
1267696 ENSDARG00000090943 P1_B1_ACTCTG    0   67
                    Genes        Cells Mine Grun
644077 ENSDARG00000045639 P1_B1_ACGTTG  116   44
644097 ENSDARG00000045639 P1_B1_CACTCA   90   18
644118 ENSDARG00000045639 P1_B1_GAATCC   84   18
644133 ENSDARG00000045639 P1_B1_GTACTC   86   21
644136 ENSDARG00000045639 P1_B1_GTGACA   66   19
644104 ENSDARG00000045639 P1_B1_CGATGA   57   17
644072 ENSDARG00000045639 P1_B1_ACCAAC   51   13
191656 ENSDARG00000014201 P1_B1_CGATGA   94   57
613210 ENSDARG00000044093 P1_B1_GACGAA   40    3
644160 ENSDARG00000045639 P1_B1_TTGTGC   41    8
#+end_example

***** TODO Where counts signficantly differ, extract umis+readnames from a given cell/gene

***** TODO For a list of readnames, pull them from two different SAM/BAM files and compare them
